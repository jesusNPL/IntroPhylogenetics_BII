x
marginal_effects(x)
conditional_smooths(x)
conditional_effects(x)
conditional_smooths(x)
library(phyr)
library(ape)
library(dplyr)
#>
#> Attaching package: 'dplyr'
#> The following objects are masked from 'package:stats':
#>
#>     filter, lag
#> The following objects are masked from 'package:base':
#>
#>     intersect, setdiff, setequal, union
data("oldfield")
install.packages("https://raw.githubusercontent.com/daijiang/phyr/master/phyr_0.1.6.tgz", repos = NULL)
devtools::install_github("daijiang/phyr")
devtools::install_github("daijiang/phyr")
devtools::install_github("daijiang/phyr")
#>
#> Attaching package: 'dplyr'
#> The following objects are masked from 'package:stats':
#>
#>     filter, lag
#> The following objects are masked from 'package:base':
#>
#>     intersect, setdiff, setequal, union
data("oldfield")
library(phyr)
library(ape)
library(dplyr)
#>
#> Attaching package: 'dplyr'
#> The following objects are masked from 'package:stats':
#>
#>     filter, lag
#> The following objects are masked from 'package:base':
#>
#>     intersect, setdiff, setequal, union
data("oldfield")
plot(oldfield$phy)
install.packages("phyr")
library(phyr)
library(ape)
library(dplyr)
#>
#> Attaching package: 'dplyr'
#> The following objects are masked from 'package:stats':
#>
#>     filter, lag
#> The following objects are masked from 'package:base':
#>
#>     intersect, setdiff, setequal, union
data("oldfield")
load("~/Downloads/oldfield.rda")
plot(oldfield$phy)
head(oldfield$data, 40)
mod <- phyr::pglmm(pres ~ disturbance + (1 | sp__) + (1 | site) +
(disturbance | sp__) + (1 | sp__@site),
data = oldfield$data,
cov_ranef = list(sp = oldfield$phy),
family = "binomial")
summary(mod)
names(mod$ss)
#> [1] "1|sp"             "1|sp__"           "1|site"           "disturbance|sp"
#> [5] "disturbance|sp__" "1|sp__@site"
test_nested <- phyr::pglmm_profile_LRT(mod, re.number = 6) ## sp__@site is the 6th random effect
pglmm_profile_LRT(mod, re.number = 6)
# alternatively, we can test all random effects
LRTs <- sapply(1:6, FUN = function(x) phyr::pglmm_profile_LRT(mod, re.number = x))
colnames(LRTs) <- names(mod$ss)
t(LRTs)
mod_bayes <- phyr::pglmm(pres ~ disturbance + (1 | sp__) + (1 | site) +
(disturbance | sp__) + (1 | sp__@site),
data = oldfield$data,
cov_ranef = list(sp = oldfield$phy),
family = "binomial",
bayes = TRUE,
prior = "pc.prior.auto")
summary(mod_bayes)
plot_bayes(mod_bayes, sort = TRUE)
resids <- DHARMa::simulateResiduals(mod_bayes, plot = FALSE)
#> Warning in checkModel(fittedModel): DHARMa: fittedModel not in class of
#> supported models. Absolutely no guarantee that this will work!
plot(resids)
rr2::R2(mod)
load("~/Dropbox (Personal)/Nutnet_private/BayesianMLM/Models/Snow/snow_mlm_Fence_phylo_sp2.rds")
readRDS("~/Dropbox (Personal)/Nutnet_private/BayesianMLM/Models/Snow/snow_mlm_Fence_phylo_sp2.rds")
x <- readRDS("Dropbox/NutNet_private/BayesianMLM/Models/Snow/snow_mlm_Fence_phylo_sp2.rds")
x
library(brms)
x
marginal_effects(x)
conditional_effects(x)
x <- readRDS("Dropbox/NutNet_private/BayesianMLM/Models/Snow/snow_mlm_K_phylo_sp2.rds")
x <- readRDS("Dropbox/NutNet_private/BayesianMLM/Models/Snow/snow_mlm_K_phylo_sp.rds")
x
load("~/Dropbox (Personal)/Lucie_Jesus/RCN_evolutionary_legacy/Multilevel/SLA_afrotropical_complex.rds")
library(brms)
tm <- readRDS("~/Dropbox (Personal)/Lucie_Jesus/RCN_evolutionary_legacy/Multilevel/SLA_afrotropical_complex.rds")
tm
plot(conditional_effects(fit1, effects = "CHELSA_bio10_1:Ancestral_DECJ_familyB"))
plot(conditional_effects(tm, effects = "CHELSA_bio10_1:Ancestral_DECJ_familyB"))
plot(conditional_effects(tm, effects = "CHELSA_bio10_1:Ancestral_DECJ_family"))
plot(conditional_effects(tm, effects = "CHELSA_bio10_12:Ancestral_DECJ_family"))
plot(conditional_effects(tm, effects = "CHELSA_bio10_4:Ancestral_DECJ_family"))
plot(conditional_effects(tm, effects = "CHELSA_bio10_15:Ancestral_DECJ_family"))
plot(conditional_effects(tm, effects = "CHELSA_bio10_1"))
plot(conditional_effects(tm, effects = "CHELSA_bio10_12"))
plot(conditional_effects(tm, effects = "CHELSA_bio10_15"))
plot(conditional_effects(tm, effects = "CHELSA_bio10_4"))
plot(conditional_effects(tm, effects = "PFts"))
plot(conditional_effects(tm, effects = "PFTsPFT13"))
devtools::install_github('levisc8/Fun_Phylo_Package')
library(FunPhylo)
?func_phy_dist
devtools::install_github("cjcarlson/codependent")
library(codependent)
data(rob1929)
head(rob1929)
binera(rob1929, iter=10, plots=TRUE)
copredict(rob1929, n.indep=500, iter=10, plot=TRUE)
coextinct(rob1929, iter=10, plots=TRUE)
View(rob1929)
?rob1229
# library
library(igraph)
# create data:
links <- data.frame(
source=c("A","A", "A", "A", "A","J", "B", "B", "C", "C", "D","I"),
target=c("B","B", "C", "D", "J","A","E", "F", "G", "H", "I","I"),
importance=(sample(1:4, 12, replace=T))
)
nodes <- data.frame(
name=LETTERS[1:10],
carac=c( rep("young",3),rep("adult",2), rep("old",5))
)
# Turn it into igraph object
network <- graph_from_data_frame(d=links, vertices=nodes, directed=F)
# Make a palette of 3 colors
library(RColorBrewer)
coul  <- brewer.pal(3, "Set1")
links
nodes
# Create a vector of color
my_color <- coul[as.numeric(as.factor(V(network)$carac))]
# Make the plot
plot(network, vertex.color=my_color)
# Add a legend
legend("bottomleft", legend=levels(as.factor(V(network)$carac))  , col = coul , bty = "n", pch=20 , pt.cex = 3, cex = 1.5, text.col=coul , horiz = FALSE, inset = c(0.1, 0.1))
# Plot
plot(network, vertex.color=my_color, edge.width=E(network)$importance*2 )
legend("bottomleft", legend=levels(as.factor(V(network)$carac))  , col = coul , bty = "n", pch=20 , pt.cex = 3, cex = 1.5, text.col=coul , horiz = FALSE, inset = c(0.1, 0.1))
remotes::install_github("lbusett/prismaread")
remotes::install_github("lbusett/prismaread")
install.packages("exactextractr")
remotes::install_github("lbusett/prismaread")
library(prismaread)
# NOT RUN {
library(ggplot2)
# Example for `geom_ridgeline_gradient()`
d <- data.frame(
x = rep(1:5, 3) + c(rep(0, 5), rep(0.3, 5), rep(0.6, 5)),
y = c(rep(0, 5), rep(1, 5), rep(3, 5)),
height = c(0, 1, 3, 4, 0, 1, 2, 3, 5, 4, 0, 5, 4, 4, 1)
)
View(d)
ggplot(d, aes(x, y, height = height, group = y, fill = factor(x+y))) +
geom_ridgeline_gradient() +
scale_fill_viridis_d(direction = -1) +
theme(legend.position = 'none')
# NOT RUN {
library(ggplot2)
# Example for `geom_ridgeline_gradient()`
d <- data.frame(
x = rep(1:5, 3) + c(rep(0, 5), rep(0.3, 5), rep(0.6, 5)),
y = c(rep(0, 5), rep(1, 5), rep(3, 5)),
height = c(0, 1, 3, 4, 0, 1, 2, 3, 5, 4, 0, 5, 4, 4, 1)
)
ggplot(d, aes(x, y, height = height, group = y, fill = factor(x+y))) +
geom_ridgeline_gradient() +
scale_fill_viridis_d(direction = -1) +
theme(legend.position = 'none')
install.packages("ggridges")
library(ggridges)
ggplot(d, aes(x, y, height = height, group = y, fill = factor(x+y))) +
geom_ridgeline_gradient() +
scale_fill_viridis_d(direction = -1) +
theme(legend.position = 'none')
# Example for `geom_density_ridges_gradient()`
ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`, fill = stat(x))) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
scale_fill_viridis_c(name = "Temp. [F]", option = "C") +
coord_cartesian(clip = "off") +
labs(title = 'Temperatures in Lincoln NE in 2016') +
theme_ridges(font_size = 13, grid = TRUE) +
theme(axis.title.y = element_blank())
library(phytools)
massMat <- as.matrix(dist(dat$mass, diag=TRUE, upper=TRUE))
bodyMassA <- rnorm(n=100, mean=10)
bodyMassA <- sort(bodyMassA)
bodyMassB <- rnorm(n=100, mean=1)
bodyMassB <- sort(bodyMassB)
trait1A <- rnorm(n=100, mean=0.1)
trait1B <- rnorm(n=100, mean=0.1)
trait1A <- sort(trait1A, decreasing=FALSE)
trait1B <- sort(trait1B, decreasing=TRUE)
dat <- data.frame(mass=c(bodyMassA,bodyMassB), trait=c(trait1A,trait1B))
View(dat)
summary(lm(dat$trait~dat$mass))
summary(lm(dat$trait[1:100]~dat$mass[1:100]))
summary(lm(dat$trait[101:200]~dat$mass[101:200]))
plot(dat)
library(phytools)
massMat <- as.matrix(dist(dat$mass, diag=TRUE, upper=TRUE))
traitMat <- as.matrix(dist(dat$trait, diag=TRUE, upper=TRUE))
massMatPositive <- massMat
massMatPositive[massMatPositive <= median(massMatPositive)] <- NA
traitMatPositive <- traitMat
traitMatPositive[is.na(massMatPositive)] <- NA
massMatNegative <- massMat
massMatNegative[massMatNegative > median(massMatNegative)] <- NA
traitMatNegative <- traitMat
traitMatNegative[is.na(massMatNegative)] <- NA
multi.mantel(traitMat, massMat, nperm=100)
multi.mantel(traitMatPositive, massMatPositive, nperm=100)
multi.mantel(traitMatNegative, massMatNegative, nperm=100)
massMatNegative
library(asnipe)
install.packages("asnipe")
library(asnipe)
## define group memberships (or read from file)
individuals <‐ data.frame(ID=c(“C695905”,“H300253”,“H300253”,
“H300283”,“H839876”,“F464557”,“H300296”,“H300253”,
“F464557”,“H300296”,“C695905”, “H300283”,“H839876”),
GROUP=c(1,1,2,2,2,3,3,4,5,5,6,6,6))
## define group memberships (or read from file)
individuals <‐ data.frame(ID=c('C695905','H300253','H300253',
'H300283','H839876','F464557','H300296','H300253',
'F464557','H300296','C695905', 'H300283','H839876'),
GROUP=c(1,1,2,2,2,3,3,4,5,5,6,6,6))
## define group memberships (or read from file)
individuals <‐ data.frame(ID=+c('C695905','H300253','H300253',
'H300283','H839876','F464557','H300296','H300253',
'F464557','H300296','C695905', 'H300283','H839876'),
GROUP=c(1,1,2,2,2,3,3,4,5,5,6,6,6))
c('C695905','H300253','H300253',
'H300283','H839876','F464557','H300296','H300253',
'F464557','H300296','C695905', 'H300283','H839876')
ID = +c('C695905','H300253','H300253',
'H300283','H839876','F464557','H300296','H300253',
'F464557','H300296','C695905', 'H300283','H839876')
c('C695905','H300253','H300253',
'H300283','H839876','F464557','H300296','H300253',
'F464557','H300296','C695905', 'H300283','H839876')
ID = c('C695905','H300253','H300253',
'H300283','H839876','F464557','H300296','H300253',
'F464557','H300296','C695905', 'H300283','H839876')
GROUP = c(1, 1, 2, 2, 2, 3, 3, 4, 5, 5, 6, 6, 6)
## define group memberships (or read from file)
individuals <‐ data.frame(ID = c('C695905','H300253','H300253',
'H300283','H839876','F464557','H300296','H300253',
'F464557','H300296','C695905', 'H300283','H839876'),
GROUP = c(1, 1, 2, 2, 2, 3, 3, 4, 5, 5, 6, 6, 6))
individuals <- data.frame(ID, GROUP)
individuals
gbi <‐ get_group_by_individual(individuals, data_format="individuals")
## define group memberships (or read from file)
individuals <- data.frame(ID = c('C695905','H300253','H300253',
'H300283','H839876','F464557','H300296','H300253',
'F464557','H300296','C695905', 'H300283','H839876'),
GROUP = c(1, 1, 2, 2, 2, 3, 3, 4, 5, 5, 6, 6, 6))
individuals <- data.frame(ID, GROUP)
## define group memberships (or read from file)
individuals <- data.frame(ID = c('C695905','H300253','H300253',
'H300283','H839876','F464557','H300296','H300253',
'F464557','H300296','C695905', 'H300283','H839876'),
GROUP = c(1, 1, 2, 2, 2, 3, 3, 4, 5, 5, 6, 6, 6))
individuals
gbi <- get_group_by_individual(individuals, data_format="individuals")
gbi
groups <- list(G1=c('C695905','H300253'),
G2=c('H300253','H300283','H839876'),
G3=c('F464557','H300296'),
G4=c('H300253'),
G5=c('F464557','H300296'),
G6=c('C695905','H300283','H839876'))
R>groups
groups
gbi <‐ get_group_by_individual(groups, data_format='groups')
gbi <- get_group_by_individual(groups, data_format='groups')
gbi
Individuals <- cbind(individuals,
DAY=c(1,1,1,1,1,2,2,2,3,3,3,3,3))
Individuals
Individuals[,+ c(1,2)]
Individuals[,3]
Individuals[, c(1,2)]
SPs <- get_sampling_periods(Individuals[, c(1,2)],Individuals[,3],1,
data_format=Individuals)
SPs <- get_sampling_periods(Individuals[, + c(1,2)],Individuals[,3], 1,
data_format=Individuals)
?get_sampling_periods
## define group memberships (or read from file)
## define group memberships (these would be read from a file)
individuals <- data.frame(ID=c("C695905","H300253","H300253",
"H300283","H839876","F464557","H300296","H300253",
"F464557","H300296","C695905","H300283","H839876"),
GROUP=c(1,1,2,2,2,3,3,4,5,5,6,6,6))
## create a time column
individuals <- cbind(individuals,
DAY=c(1,1,1,1,1,2,2,2,3,3,3,3,3))
SPs <- get_sampling_periods(individuals[,c(1,2)],
individuals[,3],1,data_format="individuals")
occurs <- get_sampling_periods(individuals[,c(1,2)],
individuals[,3],1,data_format="individuals", return="occ")
## define group memberships (these would be read from a file)
groups <- list(G1=c("C695905","H300253"),
G2=c("H300253","H300283","H839876"),
G3=c("F464557","H300296"),
G4=c("H300253"),
G5=c("F464557","H300296"),
G6=c("C695905","H300283","H839876"))
## create a time variable
days <- c(1,1,2,2,3,3)
SPs <- get_sampling_periods(groups,
days,1,data_format="groups")
occurs <- get_sampling_periods(groups,
days,1,data_format="groups", return="occ")
occurs
SPs
?mrqap.ds
?mrqap.dsp
data("individuals")
data("group_by_individual")
data("individuals")
data("group_by_individual")
View(inds)
View(gbi)
# Generate network
network <- get_network(gbi)
data("individuals")
data("group_by_individual")
# Generate network
network <- get_network(gbi)
# Create a species similarity matrix
species <- array(0,dim(network))
network
species
# Create a sex similarity matrix
sex <- array(0,dim(network))
# Fill each matrix with 1 (same) or 0 (different)
for (i in 1:nrow(network)) {
species[,-i] <- as.numeric(inds$SPECIES[1] == inds$SPECIES[-i])
sex[,-i] <- as.numeric(inds$SEX[1] == inds$SEX[-i])
}
# Run mrqap.dsp
# Note randomisations are limited to 10 to reduce runtime
reg <- mrqap.dsp(network ~ species + sex, randomisations=10)
network
species
sex
# Look at results
reg
devtools::install_github("environmentalinformatics-marburg/satelliteTools")
install.packages("glcm")
devtools::install_github("environmentalinformatics-marburg/satelliteTools")
#load packages
library(raster)
library(RStoolbox)
#make up some endmember spectra: water and land
em_names <- c("water", "land")
pts <- data.frame(class=em_names, cell = c(47916,5294))
pts
#load an example dataset
data(lsat)
lsat
em <- lsat[pts$cell]
em
rownames(em) <- em_names
em
#unmix the image for water and land
probs <- mesma(lsat, em, method = "NNLS")
#take a look
raster::hist(probs$water)
raster::plot(probs$water, col = c("white","blue"))
raster::hist(probs$land)
raster::plot(probs$land, col = c("white","brown"))
?mesma
mesma
lsat
pts
tm <- readRDS("Dropbox/Lucie_Jesus/RCN_evolutionary_legacy/SLA_neotropical_complex.rds")
tm <- readRDS("Dropbox/Lucie_Jesus/RCN_evolutionary_legacy/Multilevel/SLA/SLA_neotropical_complex.rds")
library(brms)
tm
marginal_effects(tm)
tm <- readRDS("Dropbox/Lucie_Jesus/RCN_evolutionary_legacy/Multilevel/SLA/SLA_afrotropical_complex.rds")
tm <- readRDS("Dropbox/Lucie_Jesus/RCN_evolutionary_legacy/Multilevel/SLA/SLA_afrotropical_complex_FINAL.rds")
marginal_effects(tm)
tm
install.packages("torch")
library(torch)
library(torch)
x <- array(runif(8), dim = c(2, 2, 2))
y <- torch_tensor(x, dtype = torch_float64())
y
x
#> torch_tensor
#> (1,.,.) =
#>   0.5406  0.8648
#>   0.3097  0.9715
#>
#> (2,.,.) =
#>   0.1309  0.8992
#>   0.4849  0.1902
#> [ CPUDoubleType{2,2,2} ]
identical(x, as_array(y))
x <- torch_tensor(1, requires_grad = TRUE)
w <- torch_tensor(2, requires_grad = TRUE)
b <- torch_tensor(3, requires_grad = TRUE)
y <- w * x + b
y$backward()
x$grad
#> torch_tensor
#>  2
#> [ CPUFloatType{1} ]
w$grad
#> torch_tensor
#>  1
#> [ CPUFloatType{1} ]
b$grad
x <- torch_randn(100, 2)
x
y <- 0.1 + 0.5*x[,1] - 0.7*x[,2]
y
w <- torch_randn(2, 1, requires_grad = TRUE)
b <- torch_zeros(1, requires_grad = TRUE)
w
b
lr <- 0.5
for (i in 1:100) {
y_hat <- torch_mm(x, w) + b
loss <- torch_mean((y - y_hat$squeeze(1))^2)
loss$backward()
with_no_grad({
w$sub_(w$grad*lr)
b$sub_(b$grad*lr)
w$grad$zero_()
b$grad$zero_()
})
}
print(w)
install.packages("ape")
install.packages("ape")
install.packages("ape")
~/.R/Makevars
install.packages("ape")
install.packages(brms)
install.packages("brms")
install.packages(c("devtools", "raster", "phytools", "picante", "geiger"))
install.packages("tidybayes")
install.packages("tidyverse")
install.packages("knitr")
install.packages(c("rgdal", "rgeos", "maptools", "rworldmap", "letsR"))
install.packages(brms)
install.packages(brms)
install.packages("brms")
install.packages("BBMV")
source("0.Supporting_functions.R")
install.packages("blogdown")
setwd("Documents/GitHub")
"((A:10,B:9)D:5,C:15)F;"
if (!("ape" %in% installed.packages())) {install.packages("ape", dependencies = TRUE)}
require(ape)
## Here we will create a phylogenetic tree in Newick format
newick_tree <- "((A:10,B:9)D:5,C:15)F;"
## Read the tre
newick_tree <- read.tree(text = newick_tree)
## And now we can plot the phylogentic tree
plot(newick_tree, show.node.label = TRUE)
"#NEXUS
BEGIN TAXA;
DIMENSIONS NTAXA=3;
TaxLabels A B C;
END;
BEGIN TREES;
TREE=((A:10,B:9)D:5,C:15)F;
END;"
## First create a Nexus file in the working directory
cat(
"#NEXUS
BEGIN TAXA;
DIMENSIONS NTAXA=3;
TaxLabels A B C;
END;
BEGIN TREES;
TREE=((A:10,B:9)D:5,C:15)F;
END;",
file = "Data/Nexus_tree.nex"
)
## Now read the phylogenetic tree, but look that instead of using read.tree we are using read.nexus
nexus_tree <- read.nexus("Nexus_tree.nex")
## Now read the phylogenetic tree, but look that instead of using read.tree we are using read.nexus
nexus_tree <- read.nexus("Data/Nexus_tree.nex")
## lets plot the example
plot(nexus_tree, show.node.label = TRUE)
str(nexus_tree)
